// 'use strict'

const { Telegraf, Markup } = require('telegraf')
const fs = require('fs')

const telegramApiKey = fs.readFileSync(".telegramApiKey").toString().trim()

const app = new Telegraf(telegramApiKey)

var tarea1 =
'\
Tarea 1\n\
1.- Â¿QuÃ© son los tipos de datos? \n\t/definicion_de_tipos_de_datos, \n\t/boolean, \n\t/integer, \n\tString, \n\tFloat, \n\tArray, \n\tTuple, \n\tObjecto.\n Lo pueden hacer tomando ejemplos en Python y en Javascript. \n\
2.- Â¿QuÃ© son las Variables y las Constantes? \n\
3.- Â¿QuÃ© son las funciones?\ \n\
Y finalmente...\
4.- Â¿QuÃ© son las clases y las instancias?'

var tarea2 =
'\
Segunda Tarea:\n\n\
1.- Â¿QuÃ© significa declaraciÃ³n y asignaciÃ³n de una Variable?\n\n\
2.- Hablando de funciones. Â¿QuÃ© es un argumento y en quÃ© se diferencia de un parÃ¡metro?\n\n\
3.- Â¿QuÃ© es un mÃ©todo y en quÃ© se diferencia de una funciÃ³n? (Se necesita saber muy bien que es una clase para poder responder a esta pregunta)\n\n\
4.- Â¿ CuÃ¡les son los operadores matemÃ¡ticos ? Similitudes y Diferencias entre operadores matemÃ¡ticos de Javascript y Python.\n\n\
5.- Â¿CuÃ¡les son los Operadores LÃ³gicos? Similitudes y diferencias entre Javascript y Python.\n\n\
6.- Responde con "SÃ­" o "No":. A) Â¿Son todos los operadores matemÃ¡ticos compatibles con todos los tipos de datos? B) Â¿Son todos los operadores LÃ³gicos compatibles con todos lo tipos de datos? C) Â¿Pueden algunos operadores lÃ³gicos o matemÃ¡ticos trabajar con diferentes tipos de datos contemporÃ¡neamente?\n\n\
7.- Â¿CuÃ¡les son los tipo de dato en Solidity?\n\
'

var boleano = 
'Â¿QuÃ© es un booleano?\n\n\
Un boleano es el primer tipo de dato mÃ¡s simple que existe y solo puede tener una de dos formas. Puede ser "Verdadero" o puede ser "Falso"\
En Python el boleano se escribe capitalizado "True / False" mientras en JavaScript y en Solidity se escribe todo en minusculas "true / false"\n\
Deriva directamente de la unidad minima de informaciÃ³n que es el bit\n\
0 es Falso y 1 es verdadero.\n\
En otros contextos todo lo que no sea 0, o nulo (null) o indefinido (undefined), se considera verdadero.\
'

var respuesta_al_compilador =
'Para responder a esta pregunta debes pensar en nÃºmeros binarios como seguramente habrÃ¡s imaginado. La respuesta es "10101110".\n'

var entero =
'Â¿QuÃ© es un "integer" o entero?\n\n\
Un integer es un numero entero, 0,1,2,3... y no, no llegan hasta el infinito. Una computadora dispone de una cantidad limitada de memoria y ademÃ¡s para guardar el valor de un Ãºnico nÃºmero el sistema asigna recursos limitados. En Solidity son 256 bits. Por eso veremos que en Solidity el tipo del entero de mayor capacidad se llama uint256 y int256 guarda la mitad pues todos son de valor positivo. Pero no nos adelantemos tanto. Un entero como el 1 no puede ser dividido entre 2 sin que algo extraÃ±o suceda.\
Imagina esto por un momento, que tÃº eres el compilador de un lenguaje de programaciÃ³n extraÃ±o que asigna 8 bits de recursos para guardar la informaciÃ³n de cualquier entero Â¿CÃ³mo guardarÃ­as el nÃºmero 174 dentro de esos 8 bits? -> acÃ¡ la soluciÃ³n de este problema. \/problema_del_compilador.\
'

var definicion_tipo_dato =
'Â¿QuÃ© son los tipos de datos?\n\n\
En el universo todo es energÃ­a que nunca se destruye; solo se transforma.\
En el mundo de la computaciÃ³n esta ley se mantiene. Nuestra unidad mÃ­nima de informaciÃ³n, el bit, podrÃ­a ser conciderado como el atomo de este universo.\
Al igual que el atomo conforma el estado de la materia (gaseoso, liquido, solido, plasma, etc)\ nuestro bit a segÃºn de como es agrupado con otros bits conforma el estado o tipo de los datos\
Entre los diferentes lenguajes de programaciÃ³n podrÃ­an existir infinidades de tipos de datos, pero los mÃ¡s frecuentes son variaciones de los que aquÃ­ vamos a ver \
como boleanos, nÃºmeros enteros, nÃºmeros de punto flotante y cuerdas o estringas. Este grupo de tipos de datos por lo general se agrupan entre los llamados primitivos. Luego hay otros tipos de datos que \
siendo un poco mÃ¡s elaborados podrÃ­an no agruparse con los primitivos, aquÃ­ podemos mencionar las listas o arrays, los objetos (super importantes) o diccionarios y las funciones o procesos.\
'

var content =
'\
DefiniciÃ³n tipo de datos\n\n\
/definicion_tipo_dato\n\
/boolean\n\
/integer\n\
'

// Start command
app.command('/start', ( ctx ) => {
    ctx.reply('Bienvenid@! Soy el ðŸ¤– bot del grupo de clases de Solidity salido de criptocositas de Platzi. Mi misiÃ³n es ayudarte en todo lo posible para que te conviertas en un programador de Smart Contracts lo mÃ¡s rÃ¡pido posible. Conmigo puedes revisar las tareas y repasar los conceptos fundamentales. Si quieres que yo realice nuevas tareas sugierelo a GermÃ¡n, juntos podemos hacer grandes cosas. Para revisar las tareas pincha aquÃ­ /tareas para revisar el contenido del taller pincha /contenido. Si no recuerdas los comandos pide /ayuda')
})

app.command('/tareas', ( ctx ) => {
    ctx.reply('- Tarea 1 /tarea1\n- Tarea 2 /tarea2')
})

app.command('/tarea1', ( ctx ) => {
    ctx.reply(tarea1)
})

app.command('/tarea2', ( ctx ) => {
    ctx.reply(tarea2)
})

app.command('/ayuda', ( ctx ) => {
    ctx.reply('Inicia con \/start, ve lo que de allÃ­ te interesa.')
})

app.command('/boolean', ( ctx ) => {
    ctx.reply(boleano)
})

app.command('/integer', ( ctx ) => {
    ctx.reply(entero)
})

app.command('/definicion_de_tipos_de_datos', ( ctx ) => {
    ctx.reply(definicion_tipo_dato)
})

app.command('/contenido', ( ctx ) => {
    ctx.reply(content)
})

app.command('/problema_del_compilador', ( ctx ) => {
    ctx.reply(respuesta_al_compilador)
})

app.startPolling()
